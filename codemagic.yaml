workflows:
  android-app:
    name: Android App
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      java: 17
    scripts:
      - name: Set up local properties
        script: echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
      - name: Fix Gradle Wrapper for Mac OS
        script: |
          echo "检查并修复Gradle包装器格式问题"
          # 检查gradlew文件编码和格式
          file ./gradlew
          
          # 如果gradlew文件存在但无法执行，则创建新的Unix格式版本
          if [ -f ./gradlew ]; then
            echo "检测到现有gradlew文件，转换为Unix格式"
            # 将文件内容转换为ASCII/UTF-8格式，并使用LF作为行结束符
            tr -d '\r' < ./gradlew > ./gradlew.unix
            mv ./gradlew.unix ./gradlew
            chmod +x ./gradlew
            
            # 验证文件格式
            file ./gradlew
            ls -la ./gradlew
          else
            echo "未找到gradlew文件，需要下载完整的Gradle"
          fi
      - name: Create complete Gradle Wrapper
        script: |
          echo "确保Gradle包装器正确创建"
          
          # 无论现有文件如何，都下载完整的Gradle发行版并创建新的包装器
          echo "下载完整的Gradle发行版"
          curl -L -o gradle.zip "https://services.gradle.org/distributions/gradle-4.2.2-bin.zip"
          
          echo "解压Gradle并创建包装器"
          mkdir -p temp_gradle
          unzip -q gradle.zip -d temp_gradle
          
          # 在macOS上使用绝对路径
          GRADLE_BIN_PATH="$PWD/temp_gradle/gradle-4.2.2/bin/gradle"
          chmod +x $GRADLE_BIN_PATH
          
          # 确保bin目录中的所有文件都可执行
          chmod -R +x temp_gradle/gradle-4.2.2/bin
          
          echo "使用下载的Gradle版本生成包装器"
          cd temp_gradle/gradle-4.2.2
          ./bin/gradle wrapper --gradle-version 4.2.2
          
          echo "复制生成的包装器到项目目录"
          cd ../../
          rm -f ./gradlew
          rm -f ./gradlew.bat
          rm -rf ./gradle
          
          mkdir -p gradle/wrapper
          cp -r temp_gradle/gradle-4.2.2/gradle/wrapper/* gradle/wrapper/
          cp temp_gradle/gradle-4.2.2/gradlew .
          cp temp_gradle/gradle-4.2.2/gradlew.bat .
          
          # 清理临时文件
          rm -rf temp_gradle
          rm gradle.zip
          
          echo "设置正确的权限"
          chmod +x ./gradlew
          ls -la ./gradlew
          file ./gradlew
      - name: Check Project Structure
        script: |
          echo "=== Project Root ==="
          ls -la
          
          echo "=== App Directory ==="
          ls -la app/
          
          echo "=== Src Directory ==="
          ls -la app/src/
          
          echo "=== Main Directory ==="
          ls -la app/src/main/
          
          echo "=== Java Directory ==="
          ls -la app/src/main/java/
          
          echo "=== Build Gradle ==="
          cat build.gradle
          
          echo "=== App Build Gradle ==="
          cat app/build.gradle
          
          echo "=== Settings Gradle ==="
          cat settings.gradle
          
          echo "=== AndroidManifest.xml ==="
          cat app/src/main/AndroidManifest.xml
      - name: Fix app structure if needed
        script: |
          # Clean up any misplaced files in src directory
          if [ -f app/src/MainActivity.java ]; then
            mkdir -p app/src/main/java/com/example/videotimetracker
            mv app/src/MainActivity.java app/src/main/java/com/example/videotimetracker/
          fi
          
          if [ -f app/src/MonitoringService.java ]; then
            mkdir -p app/src/main/java/com/example/videotimetracker
            mv app/src/MonitoringService.java app/src/main/java/com/example/videotimetracker/
          fi
          
          if [ -f app/src/AndroidManifest.xml ]; then
            mkdir -p app/src/main
            mv app/src/AndroidManifest.xml app/src/main/
          fi
          
          if [ -f app/src/activity_main.xml ]; then
            mkdir -p app/src/main/res/layout
            mv app/src/activity_main.xml app/src/main/res/layout/
          fi
          
          # Move web assets to assets folder
          if [ -f app/src/index.html ]; then
            mkdir -p app/src/main/assets/src
            mv app/src/index.html app/src/main/assets/src/
          fi
          
          if [ -f app/src/app.js ]; then
            mkdir -p app/src/main/assets/src
            mv app/src/app.js app/src/main/assets/src/
          fi
          
          # Ensure required directories exist
          mkdir -p app/src/main/java/com/example/videotimetracker
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/mipmap-hdpi
          mkdir -p app/src/main/res/mipmap-mdpi
          mkdir -p app/src/main/res/mipmap-xhdpi
          mkdir -p app/src/main/res/mipmap-xxhdpi
          mkdir -p app/src/main/res/mipmap-xxxhdpi
          
          # Create launcher icons if they don't exist
          if [ ! -f app/src/main/res/mipmap-hdpi/ic_launcher.png ]; then
            echo "Creating launcher icons"
            # Create a simple placeholder icon for each density
            for density in hdpi mdpi xhdpi xxhdpi xxxhdpi; do
              # Download a sample icon
              curl -L -o app/src/main/res/mipmap-$density/ic_launcher.png https://raw.githubusercontent.com/google/material-design-icons/master/png/action/build/materialicons/48dp/2x/baseline_build_black_48dp.png
              # Also create rounded version
              cp app/src/main/res/mipmap-$density/ic_launcher.png app/src/main/res/mipmap-$density/ic_launcher_round.png
            done
          fi
          
          # 使用临时文件来保存XML内容，避免YAML解析问题
          
          # Check if styles.xml exists, create if not
          if [ ! -f app/src/main/res/values/styles.xml ]; then
            echo "Creating styles.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/styles.xml
            echo '<resources>' >> app/src/main/res/values/styles.xml
            echo '    <style name="Theme.VideoTimeTracker" parent="Theme.AppCompat.Light.DarkActionBar">' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorPrimary">@color/colorPrimary</item>' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorAccent">@color/colorAccent</item>' >> app/src/main/res/values/styles.xml
            echo '    </style>' >> app/src/main/res/values/styles.xml
            echo '</resources>' >> app/src/main/res/values/styles.xml
          fi
          
          # Check if colors.xml exists, create if not
          if [ ! -f app/src/main/res/values/colors.xml ]; then
            echo "Creating colors.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/colors.xml
            echo '<resources>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorPrimary">#6200EE</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorPrimaryDark">#3700B3</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorAccent">#03DAC5</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="white">#FFFFFF</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="black">#000000</color>' >> app/src/main/res/values/colors.xml
            echo '</resources>' >> app/src/main/res/values/colors.xml
          fi
          
          # Check if strings.xml exists, create if not
          if [ ! -f app/src/main/res/values/strings.xml ]; then
            echo "Creating strings.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/strings.xml
            echo '<resources>' >> app/src/main/res/values/strings.xml
            echo '    <string name="app_name">短视频使用时长监控</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_required">需要使用情况访问权限</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_explanation">此应用需要访问使用情况权限来监控短视频应用的使用时长，请在设置中授予此权限。</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="go_to_settings">前往设置</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_denied">权限被拒绝，应用功能将受限</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="daily_usage">今日使用时长</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="daily_limit">每日限制</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="app_usage">应用使用情况</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="set_time_limit">设置时间限制</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="hours">小时</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="save_settings">保存设置</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="reset_stats">重置统计数据</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="home">首页</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="stats">统计</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="settings">设置</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="time_limit_saved">设置已保存</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="invalid_time_limit">请输入有效的时间限制</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="confirm_reset">确定要重置所有统计数据吗？</string>' >> app/src/main/res/values/strings.xml
            echo '</resources>' >> app/src/main/res/values/strings.xml
          fi
      - name: Build debug APK
        script: |
          echo "Attempting build with logging"
          # 检查gradlew权限和格式
          file ./gradlew
          chmod +x ./gradlew
          ls -la ./gradlew
          
          # 使用全路径调用gradlew
          GRADLE_USER_HOME="$CM_BUILD_DIR/.gradle"
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
          echo "Using GRADLE_USER_HOME=$GRADLE_USER_HOME with GRADLE_OPTS=$GRADLE_OPTS"
          
          # 先检查build.gradle中的Android插件版本
          echo "Checking Android plugin version in build.gradle"
          cat build.gradle | grep "com.android.tools.build:gradle"
          
          # 使用指定的Gradle版本构建
          echo "Building with Gradle 4.2.2..."
          ./gradlew clean assembleDebug --stacktrace --info --no-daemon
          
          # 检查APK是否生成
          echo "Checking for generated APK..."
          find app/build/outputs -name "*.apk"
          
          # Show build reports
          echo "===== BUILD REPORTS ====="
          find app/build/reports -name "*.html" -exec cat {} \; || echo "No build reports found."
      - name: List artifacts for debugging
        script: |
          echo "===== Listing all potential artifacts ====="
          find . -name "*.apk"
          
          # 确保输出目录存在
          mkdir -p app/build/outputs/apk/debug
          
          # 如果找到了APK但不在正确位置，复制到正确位置
          APK_FILES=$(find . -name "*.apk")
          if [ -n "$APK_FILES" ]; then
            for apk in $APK_FILES; do
              echo "Found APK: $apk"
              cp $apk app/build/outputs/apk/debug/
            done
          else
            echo "No APK files found in the build output."
          fi
    artifacts:
      - app/build/outputs/**/*.apk