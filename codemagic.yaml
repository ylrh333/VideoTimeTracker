workflows:
  android-app:
    name: Android App
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      java: 11  # Use Java 11 for better compatibility with Android toolchain
      android_sdk: 30.0.3
    scripts:
      - name: Set up local properties
        script: echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
      - name: Install and use Gradle directly
        script: |
          echo "===== Installing standalone Gradle 4.2.2 ====="
          # Download Gradle and extract to working directory
          curl -L -o gradle-4.2.2-bin.zip "https://services.gradle.org/distributions/gradle-4.2.2-bin.zip"
          unzip -q gradle-4.2.2-bin.zip
          
          # Set environment variables
          GRADLE_HOME="$PWD/gradle-4.2.2"
          PATH="$GRADLE_HOME/bin:$PATH"
          
          # Verify installation
          gradle -v
          
          echo "===== Gradle installation complete ====="
      - name: Check Project Structure
        script: |
          echo "=== Project Root ==="
          ls -la
          
          echo "=== App Directory ==="
          ls -la app/
          
          echo "=== Src Directory ==="
          ls -la app/src/
          
          echo "=== Main Directory ==="
          ls -la app/src/main/
          
          echo "=== Java Directory ==="
          ls -la app/src/main/java/
          
          echo "=== Build Gradle ==="
          cat build.gradle || echo "build.gradle not found"
          
          echo "=== App Build Gradle ==="
          cat app/build.gradle || echo "app/build.gradle not found"
          
          echo "=== Settings Gradle ==="
          cat settings.gradle || echo "settings.gradle not found"
          
          echo "=== AndroidManifest.xml ==="
          cat app/src/main/AndroidManifest.xml || echo "AndroidManifest.xml not found"
      - name: Fix app structure if needed
        script: |
          # Clean up any misplaced files in src directory
          if [ -f app/src/MainActivity.java ]; then
            mkdir -p app/src/main/java/com/example/videotimetracker
            mv app/src/MainActivity.java app/src/main/java/com/example/videotimetracker/
          fi
          
          if [ -f app/src/MonitoringService.java ]; then
            mkdir -p app/src/main/java/com/example/videotimetracker
            mv app/src/MonitoringService.java app/src/main/java/com/example/videotimetracker/
          fi
          
          if [ -f app/src/AndroidManifest.xml ]; then
            mkdir -p app/src/main
            mv app/src/AndroidManifest.xml app/src/main/
          fi
          
          if [ -f app/src/activity_main.xml ]; then
            mkdir -p app/src/main/res/layout
            mv app/src/activity_main.xml app/src/main/res/layout/
          fi
          
          # Move web assets to assets folder
          if [ -f app/src/index.html ]; then
            mkdir -p app/src/main/assets/src
            mv app/src/index.html app/src/main/assets/src/
          fi
          
          if [ -f app/src/app.js ]; then
            mkdir -p app/src/main/assets/src
            mv app/src/app.js app/src/main/assets/src/
          fi
          
          # Ensure required directories exist
          mkdir -p app/src/main/java/com/example/videotimetracker
          mkdir -p app/src/main/res/layout
          mkdir -p app/src/main/res/values
          mkdir -p app/src/main/res/mipmap-hdpi
          mkdir -p app/src/main/res/mipmap-mdpi
          mkdir -p app/src/main/res/mipmap-xhdpi
          mkdir -p app/src/main/res/mipmap-xxhdpi
          mkdir -p app/src/main/res/mipmap-xxxhdpi
          
          # Create launcher icons if they don't exist
          if [ ! -f app/src/main/res/mipmap-hdpi/ic_launcher.png ]; then
            echo "Creating launcher icons"
            # Create a simple placeholder icon for each density
            for density in hdpi mdpi xhdpi xxhdpi xxxhdpi; do
              # Download a sample icon
              curl -L -o app/src/main/res/mipmap-$density/ic_launcher.png https://raw.githubusercontent.com/google/material-design-icons/master/png/action/build/materialicons/48dp/2x/baseline_build_black_48dp.png
              # Also create rounded version
              cp app/src/main/res/mipmap-$density/ic_launcher.png app/src/main/res/mipmap-$density/ic_launcher_round.png
            done
          fi
          
          # Use temp files to save XML content, avoid YAML parsing issues
          
          # Check if styles.xml exists, create if not
          if [ ! -f app/src/main/res/values/styles.xml ]; then
            echo "Creating styles.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/styles.xml
            echo '<resources>' >> app/src/main/res/values/styles.xml
            echo '    <style name="Theme.VideoTimeTracker" parent="Theme.AppCompat.Light.DarkActionBar">' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorPrimary">@color/colorPrimary</item>' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>' >> app/src/main/res/values/styles.xml
            echo '        <item name="colorAccent">@color/colorAccent</item>' >> app/src/main/res/values/styles.xml
            echo '    </style>' >> app/src/main/res/values/styles.xml
            echo '</resources>' >> app/src/main/res/values/styles.xml
          fi
          
          # Check if colors.xml exists, create if not
          if [ ! -f app/src/main/res/values/colors.xml ]; then
            echo "Creating colors.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/colors.xml
            echo '<resources>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorPrimary">#6200EE</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorPrimaryDark">#3700B3</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="colorAccent">#03DAC5</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="white">#FFFFFF</color>' >> app/src/main/res/values/colors.xml
            echo '    <color name="black">#000000</color>' >> app/src/main/res/values/colors.xml
            echo '</resources>' >> app/src/main/res/values/colors.xml
          fi
          
          # Check if strings.xml exists, create if not
          if [ ! -f app/src/main/res/values/strings.xml ]; then
            echo "Creating strings.xml"
            echo '<?xml version="1.0" encoding="utf-8"?>' > app/src/main/res/values/strings.xml
            echo '<resources>' >> app/src/main/res/values/strings.xml
            echo '    <string name="app_name">Video Time Monitor</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_required">Usage Access Permission Required</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_explanation">This app needs usage access permission to monitor video app usage time, please grant it in settings.</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="go_to_settings">Go to Settings</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="permission_denied">Permission denied, app functionality will be limited</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="daily_usage">Today\'s Usage</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="daily_limit">Daily Limit</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="app_usage">App Usage</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="set_time_limit">Set Time Limit</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="hours">Hours</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="save_settings">Save Settings</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="reset_stats">Reset Statistics</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="home">Home</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="stats">Statistics</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="settings">Settings</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="time_limit_saved">Settings Saved</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="invalid_time_limit">Please enter a valid time limit</string>' >> app/src/main/res/values/strings.xml
            echo '    <string name="confirm_reset">Are you sure you want to reset all statistics?</string>' >> app/src/main/res/values/strings.xml
            echo '</resources>' >> app/src/main/res/values/strings.xml
          fi
      - name: Build debug APK
        script: |
          echo "===== Starting APK Build ====="
          # Configure Gradle environment variables
          GRADLE_HOME="$PWD/gradle-4.2.2"
          PATH="$GRADLE_HOME/bin:$PATH"
          GRADLE_USER_HOME="$CM_BUILD_DIR/.gradle"
          export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false"
          
          echo "Using Gradle version:"
          gradle -v
          
          echo "Build environment:"
          echo "GRADLE_HOME=$GRADLE_HOME"
          echo "PATH=$PATH"
          echo "GRADLE_USER_HOME=$GRADLE_USER_HOME"
          echo "GRADLE_OPTS=$GRADLE_OPTS"
          
          # Check Android plugin version in build.gradle
          echo "Checking Android plugin version"
          cat build.gradle | grep "com.android.tools.build:gradle"
          
          echo "Executing build command"
          gradle clean assembleDebug --info --stacktrace
          
          echo "Build complete, checking generated APK"
          find . -name "*.apk"
      - name: List artifacts for debugging
        script: |
          echo "===== Finding all potential artifacts ====="
          find . -name "*.apk"
          
          # Ensure output directory exists
          mkdir -p app/build/outputs/apk/debug
          
          # If APKs found but not in correct location, copy to correct location
          APK_FILES=$(find . -name "*.apk")
          if [ -n "$APK_FILES" ]; then
            for apk in $APK_FILES; do
              echo "Found APK: $apk"
              cp $apk app/build/outputs/apk/debug/
            done
          else
            echo "No APK files found in build output."
            # Show more debug info
            echo "===== Build directory contents ====="
            find . -type d -name "build" | xargs ls -la
          fi
    artifacts:
      - app/build/outputs/**/*.apk